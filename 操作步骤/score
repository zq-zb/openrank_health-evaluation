{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2017-08', np.int64(1)]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#采用contributor busfactor inact new\n",
    "#bus不可失去即核心\n",
    "#\"C:\\Users\\asus\\Desktop\\finally\\department-of-veterans-affairs_va.gov-team_contributor.csv\"\n",
    "#\"C:\\Users\\asus\\Desktop\\finally\\directus_directus_contributor.csv\"\n",
    "#df = pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\education_GitHubGraduation-2022_contributors.csv')\n",
    "#\"C:\\Users\\asus\\Desktop\\finally\\element-fi_elf-council-frontend_contributor.csv\"\n",
    "#element-fi_elf-council-frontend\n",
    "#JuliaRegistries_General\n",
    "df=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\JuliaRegistries_General_contributor.csv')\n",
    "df_bus=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\JuliaRegistries_General_bus_factor.csv')\n",
    "df_new = pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\JuliaRegistries_General_new_contributors.csv')\n",
    "df_inact=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\JuliaRegistries_General_inactive_contributors.csv')\n",
    "df_part=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\JuliaRegistries_General_participants.csv')\n",
    "# 打印前几行\n",
    "print(df.iloc[0].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135.0\n"
     ]
    }
   ],
   "source": [
    "part_max=df_part['指标值'].max()\n",
    "print(part_max)\n",
    "if part_max < 10 :\n",
    "    size =1\n",
    "elif part_max < 100 :\n",
    "    size =2\n",
    "elif part_max <1000 :\n",
    "    size =3\n",
    "elif part_max <10000 :\n",
    "    size =4\n",
    "else :\n",
    "    size =5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "death_time=0\n",
    "df_part_live=[]\n",
    "df_bus_live=[]\n",
    "df_live=[]\n",
    "df_inact_live=[]\n",
    "df_new_live=[]\n",
    "for i in range(len(df_part['指标值'])) :\n",
    "    if (df_part['指标值'][i]/part_max) < 0.1:\n",
    "        death_time+=1\n",
    "    else:\n",
    "        df_part_live.append(df_part['指标值'][i])\n",
    "        df_bus_live.append(df_bus['指标值'][i])\n",
    "        df_live.append(df['指标值'][i])\n",
    "        df_inact_live.append(df_inact['指标值'][i])\n",
    "        df_new_live.append(df_new['指标值'][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(15), np.int64(21), np.int64(15), np.int64(18), np.int64(13), np.int64(19), np.int64(19), np.int64(29), np.int64(26), np.int64(25), np.int64(23), np.int64(30), np.int64(28), np.int64(28), np.int64(25), np.int64(21), np.int64(29), np.int64(24), np.int64(25), np.int64(31), np.int64(28), np.int64(18), np.int64(29), np.int64(24), np.int64(24), np.int64(25), np.int64(31), np.int64(29), np.int64(18), np.int64(20), np.int64(21), np.int64(23), np.int64(22), np.int64(28), np.int64(25), np.int64(27), np.int64(22), np.int64(32), np.int64(20), np.int64(30), np.int64(26), np.int64(31), np.int64(37), np.int64(22), np.int64(28), np.int64(24), np.int64(28), np.int64(24)]\n",
      "21.581818181818182\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "print(df_live)\n",
    "data=df_live\n",
    "data_bus=df_bus_live\n",
    "data_new=df_new_live\n",
    "data_inact=df_inact_live\n",
    "data_part=df_part_live\n",
    "average_value = np.mean(df_live)\n",
    "print(average_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#bus占total的比例越低给分越高100给10分(这部分给到活跃评分的1/6)\n",
    "#new占total的比例越高给分越高(第二个1/6)\n",
    "#inact占total比例越低给分越高(这部分1/6)\n",
    "#main占bus的比例越高给高分(这部分最高1/2)\n",
    "#三个评分加权\n",
    "import numpy as np\n",
    "std=[]\n",
    "sp=[]\n",
    "so=[]\n",
    "sd=[]\n",
    "for i in range(len(data)):\n",
    "    if data_part[i]!=0:\n",
    "        std.append(data_bus[i]/data_part[i])\n",
    "        sp.append(data_inact[i]/data_part[i])\n",
    "        so.append(data_new[i]/data_part[i])\n",
    "    else :\n",
    "        std.append(0)\n",
    "        sp.append(0)\n",
    "        so.append(0)\n",
    "    if data_bus[i]!=0:\n",
    "        sd.append(data[i]/data_bus[i])\n",
    "    else :\n",
    "        sd.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.14437499683733518 0.9355872077649989 0.055677771415643416 1.5883730753034317\n",
      "9.568057987872674\n"
     ]
    }
   ],
   "source": [
    "avg1=np.mean(std)\n",
    "avg2=np.mean(sp)\n",
    "avg3=np.mean(so)\n",
    "avg4=np.mean(sd)\n",
    "print(avg1,avg2,avg3,avg4)\n",
    "avg5=1-avg2\n",
    "avg6=1-avg1\n",
    "if avg5<0 :\n",
    "    avg5=0\n",
    "if avg6<0:\n",
    "    avg6=0\n",
    "final=avg6/6+avg3/6+avg5/6+avg4/2\n",
    "print(final*10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df_part=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\education_GitHubGraduation-2022_participants.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6167.0\n"
     ]
    }
   ],
   "source": [
    "part_max=df_part['指标值'].max()\n",
    "print(part_max)\n",
    "if part_max < 10 :\n",
    "    size =1\n",
    "elif part_max < 100 :\n",
    "    size =2\n",
    "elif part_max <1000 :\n",
    "    size =3\n",
    "elif part_max <10000 :\n",
    "    size =4\n",
    "else :\n",
    "    size =5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "death_time=0\n",
    "df_part_live=[]\n",
    "for i in range(len(df_part['指标值'])) :\n",
    "    if (df_part['指标值'][i]/part_max) < 0.1:\n",
    "        death_time+=1\n",
    "    else:\n",
    "        df_part_live.append(df_part['指标值'][i])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "10\n",
      "[np.float64(6167.0)]\n",
      "9.09090909090909\n"
     ]
    }
   ],
   "source": [
    "print(size)\n",
    "print(death_time)\n",
    "print(df_part_live)\n",
    "death=death_time/len(df_part['指标值'])\n",
    "print(death*10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 读取整个CSV文件到DataFrame\n",
    "df = pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\education_GitHubGraduation-2022_active_dates_and_times.csv')\n",
    "df_part=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\education_GitHubGraduation-2022_participants.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 9, 10, 9, 6, 5, 4, 5, 4, 8, 6, 5, 6, 3, 5, 4, 3, 4, 5, 3, 3, 3, 3, 4, 5, 4, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 3, 4, 4, 2, 4, 8, 5, 1, 1, 7, 5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 4, 1, 6, 5, 4, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 6, 2, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0]\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "part_max=df_part['指标值'].max()\n",
    "death_time=0\n",
    "df_part_live=[]\n",
    "df_live=[]\n",
    "for i in range(len(df_part['指标值'])) :\n",
    "    if (df_part['指标值'][i]/part_max) < 0.1:#人数流失到只剩1/10的话我就认为该项目掉了一个数量级进入休眠状态\n",
    "        death_time+=1\n",
    "    else:\n",
    "        df_part_live.append(df_part['指标值'][i])\n",
    "        df_live.append(df['指标值'][i])\n",
    "print(df_live[0])\n",
    "print(len(df_live))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "360\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import statistics\n",
    "import ast\n",
    "data=ast.literal_eval(df_live[0])\n",
    "final=sum(data)\n",
    "print(final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "[np.int64(360)]\n",
      "6.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import statistics\n",
    "import ast\n",
    "std=[]\n",
    "sp=[]\n",
    "so=[]\n",
    "\n",
    "for i in range(len(df_live)):\n",
    "    data[i]=ast.literal_eval(df_live[i])\n",
    "    sp.append(np.sum(data[i]))\n",
    "    so.append(10*sp[i]/600)\n",
    "print(std)\n",
    "print(sp)\n",
    "avg=np.mean(so)\n",
    "print(avg)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'C:\\\\Users\\\\asus\\\\Desktop\\\\final\\\\AdguardTeam_AdguardFilters_issue_comments.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;66;03m# 读取整个CSV文件到DataFrame\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mC:\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mUsers\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43masus\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mDesktop\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mfinal\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mAdguardTeam_AdguardFilters_issue_comments.csv\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      5\u001b[0m df_time \u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC:\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mUsers\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124masus\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mDesktop\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mfinal\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mAdguardTeam_AdguardFilters_issue_resolution_duration.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      6\u001b[0m df_response\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC:\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mUsers\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124masus\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mDesktop\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mfinal\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mAdguardTeam_AdguardFilters_issue_response_time.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\io\\parsers\\readers.py:1026\u001b[0m, in \u001b[0;36mread_csv\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[0;32m   1013\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[0;32m   1014\u001b[0m     dialect,\n\u001b[0;32m   1015\u001b[0m     delimiter,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1022\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[0;32m   1023\u001b[0m )\n\u001b[0;32m   1024\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[1;32m-> 1026\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\io\\parsers\\readers.py:620\u001b[0m, in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    617\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m    619\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[1;32m--> 620\u001b[0m parser \u001b[38;5;241m=\u001b[39m \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[0;32m    623\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\io\\parsers\\readers.py:1620\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m   1617\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1619\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1620\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\io\\parsers\\readers.py:1880\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[1;34m(self, f, engine)\u001b[0m\n\u001b[0;32m   1878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[0;32m   1879\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1880\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1881\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1882\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1883\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1884\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1885\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1886\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1888\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1889\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1890\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1891\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\io\\common.py:873\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    868\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    869\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[0;32m    870\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[0;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[0;32m    872\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[1;32m--> 873\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[0;32m    874\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    875\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    876\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    877\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    878\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    880\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    881\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[0;32m    882\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'C:\\\\Users\\\\asus\\\\Desktop\\\\final\\\\AdguardTeam_AdguardFilters_issue_comments.csv'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 读取整个CSV文件到DataFrame\n",
    "df = pd.read_csv(r'C:\\Users\\asus\\Desktop\\final\\AdguardTeam_AdguardFilters_issue_comments.csv')\n",
    "df_time =pd.read_csv(r'C:\\Users\\asus\\Desktop\\final\\AdguardTeam_AdguardFilters_issue_resolution_duration.csv')\n",
    "df_response=pd.read_csv(r'C:\\Users\\asus\\Desktop\\final\\AdguardTeam_AdguardFilters_issue_response_time.csv')\n",
    "df_closed=pd.read_csv(r'C:\\Users\\asus\\Desktop\\final\\AdguardTeam_AdguardFilters_issues_closed.csv')\n",
    "df_new=pd.read_csv(r'C:\\Users\\asus\\Desktop\\final\\AdguardTeam_AdguardFilters_issues_new.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics\n",
    "import ast\n",
    "data_response=ast.literal_eval(df_response['指标值'][0])\n",
    "data_time=ast.literal_eval(df_time['指标值'][0])\n",
    "data=[]\n",
    "data_closed=[]\n",
    "data_new=[]\n",
    "for i in range(len(df['指标值'])):\n",
    "    data.append(df['指标值'][i].item())\n",
    "for i in range(len(df_closed['指标值'])):\n",
    "    data_closed.append(df_closed['指标值'][i].item())\n",
    "for i in range(len(df_new['指标值'])):\n",
    "    data_new.append(df_new['指标值'][i].item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dates: (datetime.datetime(2015, 1, 1, 0, 0), datetime.datetime(2015, 2, 1, 0, 0), datetime.datetime(2015, 3, 1, 0, 0), datetime.datetime(2015, 4, 1, 0, 0), datetime.datetime(2015, 5, 1, 0, 0), datetime.datetime(2015, 6, 1, 0, 0), datetime.datetime(2015, 7, 1, 0, 0), datetime.datetime(2015, 8, 1, 0, 0), datetime.datetime(2015, 9, 1, 0, 0), datetime.datetime(2015, 10, 1, 0, 0), datetime.datetime(2015, 11, 1, 0, 0), datetime.datetime(2015, 12, 1, 0, 0), datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 2, 1, 0, 0), datetime.datetime(2016, 3, 1, 0, 0), datetime.datetime(2016, 4, 1, 0, 0), datetime.datetime(2016, 5, 1, 0, 0), datetime.datetime(2016, 6, 1, 0, 0), datetime.datetime(2016, 7, 1, 0, 0), datetime.datetime(2016, 8, 1, 0, 0), datetime.datetime(2016, 9, 1, 0, 0), datetime.datetime(2016, 10, 1, 0, 0), datetime.datetime(2016, 11, 1, 0, 0), datetime.datetime(2016, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 2, 1, 0, 0), datetime.datetime(2017, 3, 1, 0, 0), datetime.datetime(2017, 4, 1, 0, 0), datetime.datetime(2017, 5, 1, 0, 0), datetime.datetime(2017, 6, 1, 0, 0), datetime.datetime(2017, 7, 1, 0, 0), datetime.datetime(2017, 8, 1, 0, 0), datetime.datetime(2017, 9, 1, 0, 0), datetime.datetime(2017, 10, 1, 0, 0), datetime.datetime(2017, 11, 1, 0, 0), datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2018, 1, 1, 0, 0), datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0), datetime.datetime(2018, 4, 1, 0, 0), datetime.datetime(2018, 5, 1, 0, 0), datetime.datetime(2018, 6, 1, 0, 0), datetime.datetime(2018, 7, 1, 0, 0), datetime.datetime(2018, 8, 1, 0, 0), datetime.datetime(2018, 9, 1, 0, 0), datetime.datetime(2018, 10, 1, 0, 0), datetime.datetime(2018, 11, 1, 0, 0), datetime.datetime(2018, 12, 1, 0, 0), datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0), datetime.datetime(2019, 4, 1, 0, 0), datetime.datetime(2019, 5, 1, 0, 0), datetime.datetime(2019, 6, 1, 0, 0), datetime.datetime(2019, 7, 1, 0, 0), datetime.datetime(2019, 8, 1, 0, 0), datetime.datetime(2019, 9, 1, 0, 0), datetime.datetime(2019, 10, 1, 0, 0), datetime.datetime(2019, 11, 1, 0, 0), datetime.datetime(2019, 12, 1, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 2, 1, 0, 0), datetime.datetime(2020, 3, 1, 0, 0), datetime.datetime(2020, 4, 1, 0, 0), datetime.datetime(2020, 5, 1, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 1, 0, 0), datetime.datetime(2020, 8, 1, 0, 0), datetime.datetime(2020, 9, 1, 0, 0), datetime.datetime(2020, 10, 1, 0, 0), datetime.datetime(2020, 11, 1, 0, 0), datetime.datetime(2020, 12, 1, 0, 0), datetime.datetime(2021, 1, 1, 0, 0), datetime.datetime(2021, 2, 1, 0, 0), datetime.datetime(2021, 3, 1, 0, 0), datetime.datetime(2021, 4, 1, 0, 0), datetime.datetime(2021, 5, 1, 0, 0), datetime.datetime(2021, 6, 1, 0, 0), datetime.datetime(2021, 7, 1, 0, 0), datetime.datetime(2021, 8, 1, 0, 0), datetime.datetime(2021, 9, 1, 0, 0), datetime.datetime(2021, 10, 1, 0, 0), datetime.datetime(2021, 11, 1, 0, 0), datetime.datetime(2021, 12, 1, 0, 0), datetime.datetime(2022, 1, 1, 0, 0), datetime.datetime(2022, 2, 1, 0, 0), datetime.datetime(2022, 3, 1, 0, 0), datetime.datetime(2022, 4, 1, 0, 0), datetime.datetime(2022, 5, 1, 0, 0), datetime.datetime(2022, 6, 1, 0, 0), datetime.datetime(2022, 7, 1, 0, 0), datetime.datetime(2022, 8, 1, 0, 0), datetime.datetime(2022, 9, 1, 0, 0), datetime.datetime(2022, 10, 1, 0, 0), datetime.datetime(2022, 11, 1, 0, 0), datetime.datetime(2022, 12, 1, 0, 0), datetime.datetime(2023, 1, 1, 0, 0), datetime.datetime(2023, 2, 1, 0, 0), datetime.datetime(2023, 3, 1, 0, 0))\n",
      "Values: (1.67, 2.18, 1.54, 5.45, 1.0, 0.76, 12.6, 2.92, 1.61, 35.48, 29.54, 8.63, 2.31, 3.08, 1.26, 9.12, 3.56, 3.2, 22.93, 2.38, 14.5, 0.64, 10.27, 41.43, 10.32, 3.08, 12.15, 14.3, 16.44, 10.88, 9.83, 57.55, 8.86, 15.1, 31.29, 20.79, 21.03, 41.96, 83.28, 157.66, 160.34, 90.48, 146.19, 134.4, 142.49, 151.36, 142.61, 183.8, 93.03, 38.69, 45.67, 37.6, 46.52, 21.61, 8.95, 8.83, 53.1, 37.14, 4.62, 6.23, 8.28, 8.43, 6.85, 9.82, 10.51, 24.54, 8.96, 6.35, 10.87, 16.46, 6.53, 11.64, 22.09, 16.11, 21.67, 16.2, 35.44, 14.88, 10.37, 60.29, 55.49, 239.5, 30.06, 59.92, 125.47, 103.92, 72.25, 17.86, 41.17, 45.34, 36.34, 15.11, 8.3, 11.03, 9.5, 6.15, 4.42, 3.91, 3.19)\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "\n",
    "# 过滤并转换时间和值\n",
    "times_floats = []\n",
    "\n",
    "for key, value in data_response.items():\n",
    "    if isinstance(key, str) and len(key) == 7 and key[4] == '-':  # 简单检查是否为YYYY-MM格式\n",
    "        try:\n",
    "            # 将字符串时间转换为datetime对象\n",
    "            date_obj = datetime.strptime(key, '%Y-%m')\n",
    "            # 尝试将值转换为float\n",
    "            float_value = float(value)\n",
    "            times_floats.append((date_obj, float_value))\n",
    "        except (ValueError, TypeError):\n",
    "            # 如果转换失败，跳过该项\n",
    "            continue\n",
    "\n",
    "# 按照日期排序\n",
    "times_floats.sort(key=lambda x: x[0])\n",
    "\n",
    "# 分离时间和值到两个独立的列表中\n",
    "dates_response, values_response = zip(*times_floats) if times_floats else ([], [])\n",
    "\n",
    "# 输出结果\n",
    "print(\"Dates:\", dates_response)\n",
    "print(\"Values:\", values_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dates: (datetime.datetime(2015, 1, 1, 0, 0), datetime.datetime(2015, 2, 1, 0, 0), datetime.datetime(2015, 3, 1, 0, 0), datetime.datetime(2015, 4, 1, 0, 0), datetime.datetime(2015, 5, 1, 0, 0), datetime.datetime(2015, 6, 1, 0, 0), datetime.datetime(2015, 7, 1, 0, 0), datetime.datetime(2015, 8, 1, 0, 0), datetime.datetime(2015, 9, 1, 0, 0), datetime.datetime(2015, 10, 1, 0, 0), datetime.datetime(2015, 11, 1, 0, 0), datetime.datetime(2015, 12, 1, 0, 0), datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 2, 1, 0, 0), datetime.datetime(2016, 3, 1, 0, 0), datetime.datetime(2016, 4, 1, 0, 0), datetime.datetime(2016, 5, 1, 0, 0), datetime.datetime(2016, 6, 1, 0, 0), datetime.datetime(2016, 7, 1, 0, 0), datetime.datetime(2016, 8, 1, 0, 0), datetime.datetime(2016, 9, 1, 0, 0), datetime.datetime(2016, 10, 1, 0, 0), datetime.datetime(2016, 11, 1, 0, 0), datetime.datetime(2016, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 2, 1, 0, 0), datetime.datetime(2017, 3, 1, 0, 0), datetime.datetime(2017, 4, 1, 0, 0), datetime.datetime(2017, 5, 1, 0, 0), datetime.datetime(2017, 6, 1, 0, 0), datetime.datetime(2017, 7, 1, 0, 0), datetime.datetime(2017, 8, 1, 0, 0), datetime.datetime(2017, 9, 1, 0, 0), datetime.datetime(2017, 10, 1, 0, 0), datetime.datetime(2017, 11, 1, 0, 0), datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2018, 1, 1, 0, 0), datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0), datetime.datetime(2018, 4, 1, 0, 0), datetime.datetime(2018, 5, 1, 0, 0), datetime.datetime(2018, 6, 1, 0, 0), datetime.datetime(2018, 7, 1, 0, 0), datetime.datetime(2018, 8, 1, 0, 0), datetime.datetime(2018, 9, 1, 0, 0), datetime.datetime(2018, 10, 1, 0, 0), datetime.datetime(2018, 11, 1, 0, 0), datetime.datetime(2018, 12, 1, 0, 0), datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0), datetime.datetime(2019, 4, 1, 0, 0), datetime.datetime(2019, 5, 1, 0, 0), datetime.datetime(2019, 6, 1, 0, 0), datetime.datetime(2019, 7, 1, 0, 0), datetime.datetime(2019, 8, 1, 0, 0), datetime.datetime(2019, 9, 1, 0, 0), datetime.datetime(2019, 10, 1, 0, 0), datetime.datetime(2019, 11, 1, 0, 0), datetime.datetime(2019, 12, 1, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 2, 1, 0, 0), datetime.datetime(2020, 3, 1, 0, 0), datetime.datetime(2020, 4, 1, 0, 0), datetime.datetime(2020, 5, 1, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 1, 0, 0), datetime.datetime(2020, 8, 1, 0, 0), datetime.datetime(2020, 9, 1, 0, 0), datetime.datetime(2020, 10, 1, 0, 0), datetime.datetime(2020, 11, 1, 0, 0), datetime.datetime(2020, 12, 1, 0, 0), datetime.datetime(2021, 1, 1, 0, 0), datetime.datetime(2021, 2, 1, 0, 0), datetime.datetime(2021, 3, 1, 0, 0), datetime.datetime(2021, 4, 1, 0, 0), datetime.datetime(2021, 5, 1, 0, 0), datetime.datetime(2021, 6, 1, 0, 0), datetime.datetime(2021, 7, 1, 0, 0), datetime.datetime(2021, 8, 1, 0, 0), datetime.datetime(2021, 9, 1, 0, 0), datetime.datetime(2021, 10, 1, 0, 0), datetime.datetime(2021, 11, 1, 0, 0), datetime.datetime(2021, 12, 1, 0, 0), datetime.datetime(2022, 1, 1, 0, 0), datetime.datetime(2022, 2, 1, 0, 0), datetime.datetime(2022, 3, 1, 0, 0), datetime.datetime(2022, 4, 1, 0, 0), datetime.datetime(2022, 5, 1, 0, 0), datetime.datetime(2022, 6, 1, 0, 0), datetime.datetime(2022, 7, 1, 0, 0), datetime.datetime(2022, 8, 1, 0, 0), datetime.datetime(2022, 9, 1, 0, 0), datetime.datetime(2022, 10, 1, 0, 0), datetime.datetime(2022, 11, 1, 0, 0), datetime.datetime(2022, 12, 1, 0, 0), datetime.datetime(2023, 1, 1, 0, 0), datetime.datetime(2023, 2, 1, 0, 0), datetime.datetime(2023, 3, 1, 0, 0))\n",
      "Values: (48.43, 47.76, 35.34, 33.79, 55.78, 73.33, 36.69, 38.73, 47.3, 64.95, 56.14, 70.1, 86.14, 88.5, 82.28, 84.25, 106.92, 66.41, 39.32, 45.9, 37.75, 40.24, 40.36, 53.76, 35.6, 32.88, 33.13, 31.91, 9.44, 11.51, 8.32, 6.96, 11.13, 8.05, 8.59, 6.05, 6.04, 5.26, 8.41, 8.87, 8.49, 11.97, 11.78, 12.56, 11.35, 16.64, 26.79, 34.17, 36.38, 31.13, 44.04, 38.16, 38.53, 20.3, 5.62, 6.34, 4.92, 3.98, 3.68, 3.92, 4.81, 5.23, 2.89, 4.06, 5.1, 4.16, 3.36, 3.96, 3.65, 3.62, 3.16, 6.12, 7.95, 4.66, 4.82, 5.12, 7.01, 7.2, 4.12, 4.37, 7.07, 11.35, 11.3, 14.44, 13.57, 10.41, 5.17, 2.25, 3.2, 2.62, 3.29, 3.13, 1.4, 1.49, 1.99, 1.74, 1.56, 2.23, 2.04)\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "\n",
    "# 过滤并转换时间和值\n",
    "times_floats = []\n",
    "\n",
    "for key, value in data_time.items():\n",
    "    if isinstance(key, str) and len(key) == 7 and key[4] == '-':  # 简单检查是否为YYYY-MM格式\n",
    "        try:\n",
    "            # 将字符串时间转换为datetime对象\n",
    "            date_obj = datetime.strptime(key, '%Y-%m')\n",
    "            # 尝试将值转换为float\n",
    "            float_value = float(value)\n",
    "            times_floats.append((date_obj, float_value))\n",
    "        except (ValueError, TypeError):\n",
    "            # 如果转换失败，跳过该项\n",
    "            continue\n",
    "\n",
    "# 按照日期排序\n",
    "times_floats.sort(key=lambda x: x[0])\n",
    "\n",
    "# 分离时间和值到两个独立的列表中\n",
    "dates_time, values_time = zip(*times_floats) if times_floats else ([], [])\n",
    "\n",
    "# 输出结果\n",
    "print(\"Dates:\", dates_time)\n",
    "print(\"Values:\", values_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 绘制图形\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(dates_response, values_response, marker='o', linestyle='-', color='b')\n",
    "plt.title('Time Series Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()  # 自动调整子图参数，在画布上紧凑地显示子图，默认开启\n",
    "\n",
    "# 显示图形\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 绘制图形\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(dates_time, values_time, marker='o', linestyle='-', color='b')\n",
    "plt.title('Time Series Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()  # 自动调整子图参数，在画布上紧凑地显示子图，默认开启\n",
    "\n",
    "# 显示图形\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6182791272153834 0.6395465014005678 13.131313131313133 7.348383838383837\n",
      "6.640796984370967\n"
     ]
    }
   ],
   "source": [
    "#四份评分\n",
    "#closed占比评分1/6\n",
    "#new占比评分1/3\n",
    "#反应评分1/4\n",
    "#持续时间评分1/4\n",
    "import numpy as np\n",
    "std=[]\n",
    "sp=[]\n",
    "so=[]\n",
    "sd=[]\n",
    "for i in range(len(data)):\n",
    "    if data[i]!=0:\n",
    "        std.append(data_closed[i]/data[i])\n",
    "        sp.append(data_new[i]/data[i])\n",
    "    else :\n",
    "        std.append(0)\n",
    "        sp.append(0)\n",
    "avg1=np.mean(std)\n",
    "avg2=np.mean(sp)\n",
    "for i in range(len(values_response)):\n",
    "    if values_response[i]>20 :\n",
    "        so.append(20)\n",
    "    else:\n",
    "        so.append(values_response[i])\n",
    "for i in range(len(values_time)):\n",
    "    if values_time[i]>10 :\n",
    "        sd.append(10)\n",
    "    else:\n",
    "        sd.append(values_time[i])\n",
    "avg3=np.mean(so)\n",
    "avg4=np.mean(sd)\n",
    "print(avg1,avg2,avg3,avg4)\n",
    "final=avg1*10/6+avg2*10/3+avg3*1/8+avg4*1/4\n",
    "print(final)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "#archway-network_testnets\n",
    "#element-fi_elf-council-frontend\n",
    "#unifyai_ivy\n",
    "df_part=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_participants.csv')\n",
    "df_attention=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_attention.csv')\n",
    "df_new=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_issues_new.csv')\n",
    "df_comment=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_issue_comments.csv')\n",
    "df_stars=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_stars.csv')\n",
    "df_fork=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_technical_fork.csv')\n",
    "df_closed=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\unifyai_ivy_issues_closed.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_part=[]\n",
    "data_attention=[]\n",
    "data_new=[]\n",
    "data_comment=[]\n",
    "data_stars=[]\n",
    "data_fork=[]\n",
    "data_closed=[]\n",
    "for i in range(len(df_part['指标值'])):\n",
    "    data_part.append(df_part['指标值'][i].item())\n",
    "for i in range(len(df_attention['指标值'])):\n",
    "    data_attention.append(df_attention['指标值'][i].item())\n",
    "for i in range(len(df_new['指标值'])):\n",
    "    data_new.append(df_new['指标值'][i].item())\n",
    "for i in range(len(df_comment['指标值'])):\n",
    "    data_comment.append(df_comment['指标值'][i].item())\n",
    "for i in range(len(df_stars['指标值'])):\n",
    "    data_stars.append(df_stars['指标值'][i].item())\n",
    "for i in range(len(df_fork['指标值'])):\n",
    "    data_fork.append(df_fork['指标值'][i].item())\n",
    "for i in range(len(df_closed['指标值'])):\n",
    "    data_closed.append(df_closed['指标值'][i].item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.23216200165640097 0.2930741739320762 4.908654907111874 9.544427213714382 28.724124534252628 20.579343203840107\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "std=[]\n",
    "sp=[]\n",
    "so=[]\n",
    "sd=[]\n",
    "ss=[]\n",
    "se=[]\n",
    "for i in range(len(data_comment)):\n",
    "    if data_comment[i]!=0 :\n",
    "        std.append(data_closed[i]/data_comment[i])\n",
    "        sp.append(data_new[i]/data_comment[i])\n",
    "    else:\n",
    "        std.append(0)\n",
    "        sp.append(0)\n",
    "avg1=np.mean(std)#1/9\n",
    "avg2=np.mean(sp)#2/9\n",
    "for i in range(len(data_part)):\n",
    "    if data_part[i]!=0:\n",
    "        so.append(data_attention[i]/data_part[i])#1/3\n",
    "        se.append(data_stars[i]/data_part[i])\n",
    "    else :\n",
    "        so.append(0)\n",
    "        se.append(0)\n",
    "#avg3影响力分数\n",
    "for i in range(len(data_attention)):\n",
    "    if data_attention[i]!=0:\n",
    "        sd.append(data_stars[i]/data_attention[i])#1/6\n",
    "        ss.append(data_fork[i]/data_attention[i])#1/6\n",
    "    else :\n",
    "        sd.append(0)\n",
    "        ss.append(0)\n",
    "#avg4 avg5 实用性分数\n",
    "#avg5 复制占关注影响比的倍数记作复制实用影响反馈分\n",
    "#avg4 stars数记作stars反馈比例，乘10获得分数\n",
    "avg3=np.mean(so)\n",
    "avg4=np.mean(sd)\n",
    "avg5=np.mean(ss)\n",
    "avg6=np.mean(se)\n",
    "print(avg1,avg2,avg3,avg4,avg5,avg6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.32962477898909\n",
      "0.9092337216895037\n"
     ]
    }
   ],
   "source": [
    "final=(avg6/avg3+avg4)*10/4+avg5/(avg4+avg3)*1/2*2\n",
    "print(final)\n",
    "print(avg1*10/9+avg2*20/9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25.1289835743489\n"
     ]
    }
   ],
   "source": [
    "final=(avg6/avg3+avg4)*10/6+avg5/(avg4+avg3)*2/3+avg1*10/9+avg2*20/9\n",
    "print(final)\n",
    "if final >10:\n",
    "    final =10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.32962477898909\n",
      "254.91388113146527\n",
      "3\n",
      "281\n"
     ]
    }
   ],
   "source": [
    "a=pd.read_csv(r'C:\\Users\\asus\\Desktop\\feedback(1).csv')\n",
    "b=pd.read_csv(r'C:\\Users\\asus\\Desktop\\csv\\feedback.csv')\n",
    "end=0\n",
    "p=0\n",
    "for i in range(len(a['指标值'])):\n",
    "    if a['指标值'][i]>10:\n",
    "        end=end+1\n",
    "        p=i\n",
    "print(a['指标值'].max())\n",
    "print(b['指标值'].max())\n",
    "print(end)\n",
    "print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final=(avg6/avg3+avg4)*10/6+avg5/(avg4+avg3)*2/3+avg1*10/9+avg2*20/9\n",
    "print(final)\n",
    "if final >10:\n",
    "    final =10"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df_add=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_code_change_lines_add.csv')\n",
    "df_remove=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_code_change_lines_remove.csv')\n",
    "df_sum=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_code_change_lines_sum.csv')\n",
    "df_review=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_requests_reviews.csv')\n",
    "df_request=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_requests.csv')\n",
    "df_access=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_requests_accepted.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_request=[]\n",
    "data_access=[]\n",
    "data_add=[]\n",
    "data_remove=[]\n",
    "data_sum=[]\n",
    "data_review=[]\n",
    "for i in range(len(df_request['指标值'])):\n",
    "    data_request.append(df_request['指标值'][i].item())\n",
    "for i in range(len(df_access['指标值'])):\n",
    "    data_access.append(df_access['指标值'][i].item())\n",
    "for i in range(len(df_add['指标值'])):\n",
    "    data_add.append(df_add['指标值'][i].item())\n",
    "for i in range(len(df_remove['指标值'])):\n",
    "    data_remove.append(df_remove['指标值'][i].item())\n",
    "for i in range(len(df_sum['指标值'])):\n",
    "    data_sum.append(df_sum['指标值'][i].item())\n",
    "for i in range(len(df_review['指标值'])):\n",
    "    data_review.append(df_review['指标值'][i].item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 3.0, 5.0, 4.0, 3.0, 0.0, 2.0, 5.0, 0.0, 0.0, 6.0, 4.0, 2.0, 4.0, 6.0, 5.0, 33.0, 32.0, 42.0, 110.0, 64.0, 49.0, 1.0, 65.0, 303.0, 246.0, 210.0, 121.0, 40.0, 95.0, 95.0, 102.0, 97.0, 115.0, 79.0, 56.0, 144.0, 235.0, 141.0, 36.0, 39.0, 243.0, 400.0, 476.0, 710.0, 580.0, 134.0, 139.0, 196.0, 234.0, 195.0, 270.0, 216.0, 606.0, 593.0, 464.0, 279.0, 268.0, 371.0, 195.0, 195.0, 144.0, 134.0, 88.0, 109.0, 148.0, 293.0, 215.0, 178.0]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 10.0, 28.0, 16.0, 30.0, 19.0, 16.0, 0.0, 82.0, 288.0, 155.0, 65.0, 52.0, 36.0, 31.0, 30.0, 73.0, 142.0, 61.0, 98.0, 51.0, 115.0, 232.0, 120.0, 72.0, 30.0, 196.0, 206.0, 495.0, 745.0, 489.0, 134.0, 69.0, 98.0, 92.0, 56.0, 132.0, 152.0, 304.0, 313.0, 238.0, 158.0, 191.0, 243.0, 109.0, 131.0, 77.0, 123.0, 62.0, 121.0, 127.0, 113.0, 81.0, 61.0]\n",
      "0.6720973782771535\n"
     ]
    }
   ],
   "source": [
    "print(data_request)\n",
    "print(data_review)\n",
    "sum_request=sum(data_request)\n",
    "sum_review=sum(data_review)\n",
    "avg1=sum_review/sum_request\n",
    "print(avg1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5300719869960627\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "std=[]\n",
    "for i in range(len(data_request)):\n",
    "    if data_request[i]!=0 :\n",
    "        std.append(data_access[i]/data_request[i])\n",
    "    else :\n",
    "        std.append(0)\n",
    "avg2=np.mean(std)\n",
    "print(avg2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.0, 20.0, 0.0, 2.0, 0.0, 0.0, 4.0, 4.0, 0.0, 2.0, 4.0, 0.0, 0.0, 0.0, 4.0, 80.0, 42.0, 102.0, 22.0, 0.0, 6.0, 8.0, 0.0, 0.0, 17.0, 20.0, 51.0, 23.0, 157.0, 30.0, 1476.0, 305.0, 336.0, 3942.0, 14597.0, 771.0, 6.0, 2083.0, 2585.0, 2818.0, 5832.0, 1610.0, 477.0, 494.0, 532.0, 807.0, 666.0, 1183.0, 432.0, 413.0, 962.0, 2056.0, 863.0, 14277.0, 312.0, 1243.0, 2592.0, 3319.0, 3995.0, 8338.0, 790.0, 2429.0, 4272.0, 2431.0, 849.0, 126.0, 2328.0, 2516.0, 3602.0, 3478.0, 1927.0, 2139.0, 2790.0, 956.0, 83419.0, 1308.0, 1800.0, 406.0, 807.0, 780.0, 9157.0, 2048.0, 53735.0]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.0, 20.0, 0.0, 2.0, 0.0, 0.0, 4.0, 4.0, 0.0, 2.0, 4.0, 0.0, 0.0, 0.0, 4.0, 1.0, 27.0, 92.0, 18.0, 0.0, -99.0, -80.0, 0.0, 0.0, -20.0, -254.0, -65.0, 19.0, 124.0, 28.0, 436.0, -2204.0, 271.0, 2516.0, -925.0, 72.0, 5.0, 196.0, 1143.0, 1246.0, 1829.0, 1172.0, 152.0, 67.0, 411.0, 400.0, 335.0, 98.0, 180.0, 246.0, 551.0, 569.0, 34.0, 13383.0, -463.0, -394.0, -36287.0, 1708.0, 1578.0, 1663.0, 198.0, -675.0, -782.0, 325.0, 217.0, 45.0, 1597.0, 669.0, 1724.0, 1749.0, 617.0, -416.0, -2073.0, -68.0, -91.0, 211.0, -1677.0, 78.0, 79.0, -137.0, -1249.0, -1615.0, -73.0]\n"
     ]
    }
   ],
   "source": [
    "print(data_add)\n",
    "print(data_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.98165182369991 19.668520510568595\n",
      "0.3131313131313149\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "sp=[]\n",
    "so=[]\n",
    "for i in range(len(data_sum)):\n",
    "    if data_sum[i]!=0 :\n",
    "        sp.append(data_add[i]/np.abs(data_sum[i]))\n",
    "        so.append(data_remove[i]/np.abs(data_sum[i]))\n",
    "    else :\n",
    "        sp.append(0)\n",
    "        so.append(0)\n",
    "avg3=np.mean(sp)\n",
    "avg4=np.mean(so)\n",
    "print(avg3,avg4)\n",
    "avg5=avg3-avg4\n",
    "print(avg5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.571079978839615\n"
     ]
    }
   ],
   "source": [
    "final=avg1/4+avg2/4+avg5/2\n",
    "print(10*final)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 读取整个CSV文件到DataFrame\n",
    "df = pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_request_resolution_duration.csv')\n",
    "df_time =pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_request_response_time.csv')\n",
    "df_request=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_requests.csv')\n",
    "df_access=pd.read_csv(r'C:\\Users\\asus\\Desktop\\finally\\AdguardTeam_AdguardFilters_change_requests_accepted.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics\n",
    "import ast\n",
    "data=ast.literal_eval(df['指标值'][0])\n",
    "data_time=ast.literal_eval(df_time['指标值'][0])\n",
    "data_request=[]\n",
    "data_access=[]\n",
    "for i in range(len(df_request['指标值'])):\n",
    "    data_request.append(df_request['指标值'][i].item())\n",
    "for i in range(len(df_access['指标值'])):\n",
    "    data_access.append(df_access['指标值'][i].item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 15.0, 33.0, 35.0, 86.0, 72.0, 41.0, 0.0, 46.0, 281.0, 245.0, 200.0, 124.0, 33.0, 76.0, 83.0, 103.0, 82.0, 91.0, 62.0, 52.0, 134.0, 236.0, 133.0, 27.0, 30.0, 211.0, 262.0, 401.0, 693.0, 528.0, 126.0, 114.0, 181.0, 224.0, 161.0, 233.0, 192.0, 506.0, 426.0, 337.0, 302.0, 272.0, 322.0, 197.0, 169.0, 152.0, 148.0, 87.0, 95.0, 125.0, 272.0, 210.0, 161.0]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 3.0, 5.0, 4.0, 3.0, 0.0, 2.0, 5.0, 0.0, 0.0, 6.0, 4.0, 2.0, 4.0, 6.0, 5.0, 33.0, 32.0, 42.0, 110.0, 64.0, 49.0, 1.0, 65.0, 303.0, 246.0, 210.0, 121.0, 40.0, 95.0, 95.0, 102.0, 97.0, 115.0, 79.0, 56.0, 144.0, 235.0, 141.0, 36.0, 39.0, 243.0, 400.0, 476.0, 710.0, 580.0, 134.0, 139.0, 196.0, 234.0, 195.0, 270.0, 216.0, 606.0, 593.0, 464.0, 279.0, 268.0, 371.0, 195.0, 195.0, 144.0, 134.0, 88.0, 109.0, 148.0, 293.0, 215.0, 178.0]\n"
     ]
    }
   ],
   "source": [
    "print(data_access)\n",
    "print(data_request)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dates: (datetime.datetime(2016, 2, 1, 0, 0), datetime.datetime(2016, 8, 1, 0, 0), datetime.datetime(2016, 11, 1, 0, 0), datetime.datetime(2016, 12, 1, 0, 0), datetime.datetime(2017, 2, 1, 0, 0), datetime.datetime(2017, 3, 1, 0, 0), datetime.datetime(2017, 7, 1, 0, 0), datetime.datetime(2017, 8, 1, 0, 0), datetime.datetime(2017, 9, 1, 0, 0), datetime.datetime(2017, 10, 1, 0, 0), datetime.datetime(2017, 11, 1, 0, 0), datetime.datetime(2018, 1, 1, 0, 0), datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 5, 1, 0, 0), datetime.datetime(2018, 6, 1, 0, 0), datetime.datetime(2018, 7, 1, 0, 0), datetime.datetime(2018, 8, 1, 0, 0), datetime.datetime(2018, 9, 1, 0, 0), datetime.datetime(2018, 10, 1, 0, 0), datetime.datetime(2018, 11, 1, 0, 0), datetime.datetime(2018, 12, 1, 0, 0), datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0), datetime.datetime(2019, 4, 1, 0, 0), datetime.datetime(2019, 5, 1, 0, 0), datetime.datetime(2019, 6, 1, 0, 0), datetime.datetime(2019, 7, 1, 0, 0), datetime.datetime(2019, 8, 1, 0, 0), datetime.datetime(2019, 9, 1, 0, 0), datetime.datetime(2019, 10, 1, 0, 0), datetime.datetime(2019, 11, 1, 0, 0), datetime.datetime(2019, 12, 1, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 2, 1, 0, 0), datetime.datetime(2020, 3, 1, 0, 0), datetime.datetime(2020, 4, 1, 0, 0), datetime.datetime(2020, 5, 1, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 1, 0, 0), datetime.datetime(2020, 8, 1, 0, 0), datetime.datetime(2020, 9, 1, 0, 0), datetime.datetime(2020, 10, 1, 0, 0), datetime.datetime(2020, 11, 1, 0, 0), datetime.datetime(2020, 12, 1, 0, 0), datetime.datetime(2021, 1, 1, 0, 0), datetime.datetime(2021, 2, 1, 0, 0), datetime.datetime(2021, 3, 1, 0, 0), datetime.datetime(2021, 4, 1, 0, 0), datetime.datetime(2021, 5, 1, 0, 0), datetime.datetime(2021, 6, 1, 0, 0), datetime.datetime(2021, 7, 1, 0, 0), datetime.datetime(2021, 8, 1, 0, 0), datetime.datetime(2021, 9, 1, 0, 0), datetime.datetime(2021, 10, 1, 0, 0), datetime.datetime(2021, 11, 1, 0, 0), datetime.datetime(2021, 12, 1, 0, 0), datetime.datetime(2022, 1, 1, 0, 0), datetime.datetime(2022, 2, 1, 0, 0), datetime.datetime(2022, 3, 1, 0, 0), datetime.datetime(2022, 4, 1, 0, 0), datetime.datetime(2022, 5, 1, 0, 0), datetime.datetime(2022, 6, 1, 0, 0), datetime.datetime(2022, 7, 1, 0, 0), datetime.datetime(2022, 8, 1, 0, 0), datetime.datetime(2022, 9, 1, 0, 0), datetime.datetime(2022, 10, 1, 0, 0), datetime.datetime(2022, 11, 1, 0, 0), datetime.datetime(2022, 12, 1, 0, 0), datetime.datetime(2023, 1, 1, 0, 0), datetime.datetime(2023, 2, 1, 0, 0), datetime.datetime(2023, 3, 1, 0, 0))\n",
      "Values: (121.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 3.0, 0.6, 1.5, 2.0, 3.5, 4.4, 10.0, 15.0, 34.0, 10.0, 15.4, 2.25, 1.68, 3.52, 3.45, 5.53, 3.55, 9.88, 21.0, 3.71, 0.99, 1.13, 1.04, 1.06, 1.75, 1.85, 2.06, 3.27, 2.23, 2.65, 4.76, 1.69, 1.15, 1.28, 2.0, 1.35, 0.92, 1.18, 1.93, 1.58, 1.47, 2.34, 2.25, 2.3, 1.02, 0.51, 1.3, 1.81, 1.35, 2.88, 6.45, 6.17, 3.12, 0.65, 0.66, 1.17, 1.86, 0.91, 1.26, 1.14, 0.85, 1.45, 0.51, 0.65, 0.82)\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "\n",
    "# 过滤并转换时间和值\n",
    "times_floats = []\n",
    "\n",
    "for key, value in data.items():\n",
    "    if isinstance(key, str) and len(key) == 7 and key[4] == '-':  # 简单检查是否为YYYY-MM格式\n",
    "        try:\n",
    "            # 将字符串时间转换为datetime对象\n",
    "            date_obj = datetime.strptime(key, '%Y-%m')\n",
    "            # 尝试将值转换为float\n",
    "            float_value = float(value)\n",
    "            times_floats.append((date_obj, float_value))\n",
    "        except (ValueError, TypeError):\n",
    "            # 如果转换失败，跳过该项\n",
    "            continue\n",
    "\n",
    "# 按照日期排序\n",
    "times_floats.sort(key=lambda x: x[0])\n",
    "\n",
    "# 分离时间和值到两个独立的列表中\n",
    "dates, values = zip(*times_floats) if times_floats else ([], [])\n",
    "\n",
    "# 输出结果\n",
    "print(\"Dates:\", dates)\n",
    "print(\"Values:\", values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dates: (datetime.datetime(2016, 2, 1, 0, 0), datetime.datetime(2016, 8, 1, 0, 0), datetime.datetime(2016, 11, 1, 0, 0), datetime.datetime(2016, 12, 1, 0, 0), datetime.datetime(2017, 2, 1, 0, 0), datetime.datetime(2017, 3, 1, 0, 0), datetime.datetime(2017, 7, 1, 0, 0), datetime.datetime(2017, 8, 1, 0, 0), datetime.datetime(2017, 9, 1, 0, 0), datetime.datetime(2017, 10, 1, 0, 0), datetime.datetime(2017, 11, 1, 0, 0), datetime.datetime(2018, 1, 1, 0, 0), datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 5, 1, 0, 0), datetime.datetime(2018, 6, 1, 0, 0), datetime.datetime(2018, 7, 1, 0, 0), datetime.datetime(2018, 8, 1, 0, 0), datetime.datetime(2018, 9, 1, 0, 0), datetime.datetime(2018, 10, 1, 0, 0), datetime.datetime(2018, 11, 1, 0, 0), datetime.datetime(2018, 12, 1, 0, 0), datetime.datetime(2019, 1, 1, 0, 0), datetime.datetime(2019, 2, 1, 0, 0), datetime.datetime(2019, 3, 1, 0, 0), datetime.datetime(2019, 4, 1, 0, 0), datetime.datetime(2019, 5, 1, 0, 0), datetime.datetime(2019, 6, 1, 0, 0), datetime.datetime(2019, 7, 1, 0, 0), datetime.datetime(2019, 8, 1, 0, 0), datetime.datetime(2019, 9, 1, 0, 0), datetime.datetime(2019, 10, 1, 0, 0), datetime.datetime(2019, 11, 1, 0, 0), datetime.datetime(2019, 12, 1, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 2, 1, 0, 0), datetime.datetime(2020, 3, 1, 0, 0), datetime.datetime(2020, 4, 1, 0, 0), datetime.datetime(2020, 5, 1, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 1, 0, 0), datetime.datetime(2020, 8, 1, 0, 0), datetime.datetime(2020, 9, 1, 0, 0), datetime.datetime(2020, 10, 1, 0, 0), datetime.datetime(2020, 11, 1, 0, 0), datetime.datetime(2020, 12, 1, 0, 0), datetime.datetime(2021, 1, 1, 0, 0), datetime.datetime(2021, 2, 1, 0, 0), datetime.datetime(2021, 3, 1, 0, 0), datetime.datetime(2021, 4, 1, 0, 0), datetime.datetime(2021, 5, 1, 0, 0), datetime.datetime(2021, 6, 1, 0, 0), datetime.datetime(2021, 7, 1, 0, 0), datetime.datetime(2021, 8, 1, 0, 0), datetime.datetime(2021, 9, 1, 0, 0), datetime.datetime(2021, 10, 1, 0, 0), datetime.datetime(2021, 11, 1, 0, 0), datetime.datetime(2021, 12, 1, 0, 0), datetime.datetime(2022, 1, 1, 0, 0), datetime.datetime(2022, 2, 1, 0, 0), datetime.datetime(2022, 3, 1, 0, 0), datetime.datetime(2022, 4, 1, 0, 0), datetime.datetime(2022, 5, 1, 0, 0), datetime.datetime(2022, 6, 1, 0, 0), datetime.datetime(2022, 7, 1, 0, 0), datetime.datetime(2022, 8, 1, 0, 0), datetime.datetime(2022, 9, 1, 0, 0), datetime.datetime(2022, 10, 1, 0, 0), datetime.datetime(2022, 11, 1, 0, 0), datetime.datetime(2022, 12, 1, 0, 0), datetime.datetime(2023, 1, 1, 0, 0), datetime.datetime(2023, 2, 1, 0, 0), datetime.datetime(2023, 3, 1, 0, 0))\n",
      "Values: (40.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 3.0, 0.4, 0.25, 0.33, 3.5, 4.2, 304.67, 7.75, 29.5, 4.5, 278.0, 326.0, 145.15, 100.44, 111.67, 31.4, 25.98, 31.98, 21.0, 1.09, 4.74, 6.11, 0.78, 11.04, 0.38, 1.37, 1.66, 2.77, 12.63, 1.64, 15.65, 37.98, 7.71, 0.71, 1.65, 0.33, 0.72, 1.0, 11.8, 2.7, 4.37, 4.16, 6.87, 6.24, 0.41, 0.53, 9.54, 103.19, 0.58, 2.91, 13.02, 23.94, 11.23, 2.79, 8.93, 6.76, 4.89, 0.52, 0.83, 0.9, 3.0, 2.36, 0.95, 0.69, 1.07)\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "\n",
    "# 过滤并转换时间和值\n",
    "times_floats = []\n",
    "\n",
    "for key, value in data_time.items():\n",
    "    if isinstance(key, str) and len(key) == 7 and key[4] == '-':  # 简单检查是否为YYYY-MM格式\n",
    "        try:\n",
    "            # 将字符串时间转换为datetime对象\n",
    "            date_obj = datetime.strptime(key, '%Y-%m')\n",
    "            # 尝试将值转换为float\n",
    "            float_value = float(value)\n",
    "            times_floats.append((date_obj, float_value))\n",
    "        except (ValueError, TypeError):\n",
    "            # 如果转换失败，跳过该项\n",
    "            continue\n",
    "\n",
    "# 按照日期排序\n",
    "times_floats.sort(key=lambda x: x[0])\n",
    "\n",
    "# 分离时间和值到两个独立的列表中\n",
    "dates_time, values_time = zip(*times_floats) if times_floats else ([], [])\n",
    "\n",
    "# 输出结果\n",
    "print(\"Dates:\", dates_time)\n",
    "print(\"Values:\", values_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 绘制图形\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(dates, values, marker='o', linestyle='-', color='b')\n",
    "plt.title('Time Series Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()  # 自动调整子图参数，在画布上紧凑地显示子图，默认开启\n",
    "\n",
    "# 显示图形\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 绘制图形\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(dates_time, values_time, marker='o', linestyle='-', color='b')\n",
    "plt.title('Time Series Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()  # 自动调整子图参数，在画布上紧凑地显示子图，默认开启\n",
    "\n",
    "# 显示图形\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5300719869960627 3.3713888888888888 2.8102777777777774\n",
      "6.934915882579468\n"
     ]
    }
   ],
   "source": [
    "#接受率100%评10分\n",
    "#解反映间取平均(20算0,0算10)\n",
    "#持续时间大于10评0，0评10\n",
    "import numpy as np\n",
    "std=[]\n",
    "sp=[]\n",
    "so=[]\n",
    "for i in range(len(values)):\n",
    "    if values[i]>10 :\n",
    "        sp.append(10)\n",
    "    else:\n",
    "        sp.append(values[i])\n",
    "for i in range(len(values_time)):\n",
    "    if values[i]>20 :\n",
    "        so.append(20)\n",
    "    else:\n",
    "        so.append(values[i])\n",
    "avg2=np.mean(so)\n",
    "avg3=np.mean(sp)\n",
    "for i in range(len(data_request)):\n",
    "    if data_request[i]!=0 :\n",
    "        std.append(data_access[i]/data_request[i])\n",
    "    else :\n",
    "        std.append(0)\n",
    "avg1=np.mean(std)\n",
    "print(avg1,avg2,avg3)\n",
    "avg4=20-avg2\n",
    "avg5=10-avg3\n",
    "if avg4 < 0:\n",
    "    avg4=0\n",
    "if avg5 < 0 :\n",
    "    avg5=0\n",
    "final=(avg1*10+avg4/2+avg5)/3\n",
    "print(final)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "读取time分（从time_change），读取activity分（从activity_change）,读取request分（从request），读取death分(从extra)\n",
    "总结act_final分\n",
    "act_final=(time+activity+request-0.4*death)/3"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "health=0.3*act_final+0.2*issue+0.3*quality+0.2*feedback"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}





